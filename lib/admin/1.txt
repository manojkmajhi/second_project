import 'package:shared_preferences/shared_preferences.dart';

class SharedPreferenceHelper {
  // Keys used in SharedPreferences
  static const String userIdKey = "userId";
  static const String userNameKey = "userName";
  static const String userEmailKey = "userEmail";
  static const String userPasswordKey = "userPassword";
  static const String userImageKey = "userImage";
  static const String cartProductsKey = "cart_products";

  // Singleton instance
  static final SharedPreferenceHelper _instance = SharedPreferenceHelper._internal();
  factory SharedPreferenceHelper() => _instance;
  SharedPreferenceHelper._internal();

  // Get SharedPreferences instance
  Future<SharedPreferences> get _prefs async => await SharedPreferences.getInstance();

  // Save/Get User ID
  Future<bool> saveUserId(String userId) async {
    final prefs = await _prefs;
    return prefs.setString(userIdKey, userId);
  }

  Future<String?> getUserId() async {
    final prefs = await _prefs;
    return prefs.getString(userIdKey);
  }

  // Save/Get User Name
  Future<bool> saveUserName(String userName) async {
    final prefs = await _prefs;
    return prefs.setString(userNameKey, userName);
  }

  Future<String?> getUserName() async {
    final prefs = await _prefs;
    return prefs.getString(userNameKey);
  }

  // Save/Get User Email
  Future<bool> saveUserEmail(String userEmail) async {
    final prefs = await _prefs;
    return prefs.setString(userEmailKey, userEmail);
  }

  Future<String?> getUserEmail() async {
    final prefs = await _prefs;
    return prefs.getString(userEmailKey);
  }

  // Save/Get User Password
  Future<bool> saveUserPassword(String userPassword) async {
    final prefs = await _prefs;
    return prefs.setString(userPasswordKey, userPassword);
  }

  Future<String?> getUserPassword() async {
    final prefs = await _prefs;
    return prefs.getString(userPasswordKey);
  }

  // Save/Get User Image
  Future<bool> saveUserImage(String userImage) async {
    final prefs = await _prefs;
    return prefs.setString(userImageKey, userImage);
  }

  Future<String?> getUserImage() async {
    final prefs = await _prefs;
    return prefs.getString(userImageKey);
  }

  // Remove only cart products
  Future<bool> removeCartProducts() async {
    final prefs = await _prefs;
    return prefs.remove(cartProductsKey);
  }

  // Clear all user-related data (for logout)
  Future<bool> clearUserData() async {
    final prefs = await _prefs;
    return Future.wait([
      prefs.remove(userIdKey),
      prefs.remove(userNameKey),
      prefs.remove(userEmailKey),
      prefs.remove(userPasswordKey),
      prefs.remove(userImageKey),
      prefs.remove(cartProductsKey),
    ]).then((results) => results.every((result) => result));
  }

  // Clear entire SharedPreferences (used in edge cases)
  Future<void> clearAll() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear();
  }

  // Check if a user is logged in by checking if userId exists
  Future<bool> isUserLoggedIn() async {
    final prefs = await _prefs;
    return prefs.getString(userIdKey) != null;
  }
} 
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:second_project/database/shared_preferences.dart';
import 'package:sqflite/sqflite.dart';

class DBHelper {
  static const String dbName = "toolkit.db";
  static const String tableName = "users";
  static const String productTableName = "product";
  static const String cartTableName = "cart";
  static const String orderTableName = "orders";
  static const String wishlistTableName = "wishlist";

  DBHelper._();
  static final DBHelper instance = DBHelper._();
  static Database? _myDB;

  // Get existing or open a new DB connection
  Future<Database> getDB() async {
    if (_myDB != null) return _myDB!;
    _myDB = await openDB();
    return _myDB!;
  }

  // Open and create tables
  Future<Database> openDB() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, dbName);

    return await openDatabase(
      path,
      version: 2,
      onCreate: (Database db, int version) async {
        await db.execute("PRAGMA foreign_keys = ON;");
        await db.execute('''
          CREATE TABLE $tableName (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT NOT NULL UNIQUE,
            password TEXT NOT NULL,
            image TEXT
          )
        ''');
        await db.execute('''
          CREATE TABLE $productTableName (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_name TEXT NOT NULL,
            product_price REAL NOT NULL,
            product_quantity INTEGER NOT NULL,
            details TEXT,
            category TEXT,
            image_path TEXT
          )
        ''');
        await db.execute('''
          CREATE TABLE $cartTableName (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id INTEGER NOT NULL,
            quantity INTEGER NOT NULL,
            FOREIGN KEY (product_id) REFERENCES $productTableName(id) ON DELETE CASCADE
          )
        ''');
        await db.execute('''
          CREATE TABLE $orderTableName (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            total_price REAL NOT NULL,
            order_date TEXT,
            FOREIGN KEY (user_id) REFERENCES $tableName(id) ON DELETE CASCADE
          )
        ''');
        await db.execute('''
          CREATE TABLE $wishlistTableName (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            product_id INTEGER NOT NULL,
            FOREIGN KEY (user_id) REFERENCES $tableName(id) ON DELETE CASCADE,
            FOREIGN KEY (product_id) REFERENCES $productTableName(id) ON DELETE CASCADE
          )
        ''');

        await db.execute("CREATE INDEX idx_email ON $tableName(email);");
        await db.execute("CREATE INDEX idx_user_id ON $orderTableName(user_id);");
        await db.execute("CREATE INDEX idx_product_id_cart ON $cartTableName(product_id);");
        await db.execute("CREATE INDEX idx_product_id_wishlist ON $wishlistTableName(product_id);");
      },
    );
  }

  // ---------------- User Login ----------------
  Future<bool> loginUser(String email, String password) async {
    final db = await getDB();
    final result = await db.query(
      tableName,
      where: 'email = ? AND password = ?',
      whereArgs: [email, password],
    );

    if (result.isNotEmpty) {
      final user = result.first;

      // Save user details in SharedPreferences
      await SharedPreferenceHelper().saveUserId(user['id'].toString());
      await SharedPreferenceHelper().saveUserName(user['name'].toString());
      await SharedPreferenceHelper().saveUserEmail(user['email'].toString());
      await SharedPreferenceHelper().saveUserPassword(user['password'].toString());
      await SharedPreferenceHelper().saveUserImage(user['image']?.toString() ?? '');

      debugPrint("‚úÖ User logged in: ${user['name']}");
      return true;
    }

    debugPrint("‚ùå No user found with those credentials");
    return false;
  }

  // ---------------- User Logout ----------------
  Future<void> logoutUser() async {
    await SharedPreferenceHelper().clearUserData();
    debugPrint("üëã User logged out");
  }

  // ---------------- Session Check ----------------
  Future<bool> isUserLoggedIn() async {
    return await SharedPreferenceHelper().isUserLoggedIn();
  }

  // ---------------- Get Logged-in User from DB ----------------
  Future<Map<String, dynamic>?> getLoggedInUser() async {
    final userIdStr = await SharedPreferenceHelper().getUserId();
    if (userIdStr == null) return null;

    final userId = int.tryParse(userIdStr);
    if (userId == null) return null;

    return await getUserById(userId);
  }

  // ---------------- User Management ----------------
  Future<List<Map<String, dynamic>>> getAllUsers() async {
    final db = await getDB();
    return await db.query(tableName);
  }

  Future<Map<String, dynamic>?> getUserById(int id) async {
    final db = await getDB();
    final result = await db.query(tableName, where: 'id = ?', whereArgs: [id]);
    return result.isNotEmpty ? result.first : null;
  }

  Future<int> deleteUserById(int id) async {
    final db = await getDB();
    return await db.delete(tableName, where: 'id = ?', whereArgs: [id]);
  }

  // ---------------- Product Management ----------------
  Future<int> insertProduct(Map<String, dynamic> product) async {
    final db = await getDB();
    if (product['category'] != null) {
      String raw = product['category'].toString().trim();
      product['category'] =
          raw[0].toUpperCase() + raw.substring(1).toLowerCase();
    }
    return await db.insert(productTableName, product);
  }

  Future<List<Map<String, dynamic>>> getAllProducts() async {
    final db = await getDB();
    return await db.query(productTableName);
  }

  Future<int> deleteProductById(int id) async {
    final db = await getDB();
    return await db.delete(productTableName, where: 'id = ?', whereArgs: [id]);
  }

  Future<void> normalizeProductCategories() async {
    final db = await getDB();
    List<Map<String, dynamic>> products = await db.query(productTableName);

    for (var product in products) {
      final id = product['id'];
      final rawCategory = (product['category'] ?? '').toString().trim();

      if (rawCategory.isEmpty) continue;

      final normalizedCategory =
          rawCategory[0].toUpperCase() + rawCategory.substring(1).toLowerCase();

      await db.update(
        productTableName,
        {'category': normalizedCategory},
        where: 'id = ?',
        whereArgs: [id],
      );
    }

    debugPrint("‚úÖ Product categories normalized.");
  }

  // ---------------- Utility ----------------
  Future<void> deleteDatabaseFile() async {
    final dbPath = await getDatabasesPath();
    final path = join(dbPath, dbName);
    await deleteDatabase(path);
    debugPrint("üóëÔ∏è Database deleted");
  }
}
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:second_project/data/local/db_helper.dart';
import 'package:second_project/database/database.dart';
import 'package:second_project/pages/signin.dart';
import 'package:second_project/widget/support_widget.dart';
import 'package:shared_preferences/shared_preferences.dart';

class Profile extends StatefulWidget {
  const Profile({super.key});

  @override
  State<Profile> createState() => _ProfileState();
}

class _ProfileState extends State<Profile> {
  String userName = '';
  String userEmail = '';
  int? userId;

  @override
  void initState() {
    super.initState();
    fetchUserData();
  }

  Future<void> fetchUserData() async {
    final prefs = await SharedPreferences.getInstance();
    userId = prefs.getInt('user_id');
    debugPrint("userId from SharedPreferences: $userId");

    if (userId != null) {
      final db = await DBHelper.instance.getDB();
      final result = await db.query(
        "users",
        where: "id = ?",
        whereArgs: [userId],
      );
      debugPrint("SQLite user query result: $result");

      if (result.isNotEmpty) {
        final user = result.first;
        setState(() {
          userName = user['name']?.toString() ?? 'Unknown';
          userEmail = user['email']?.toString() ?? 'Unknown';
        });
      } else {
        debugPrint("No user found with ID: $userId");
      }
    } else {
      debugPrint(" user_id not found in SharedPreferences");
    }
  }

  Future<void> updateUserName(String newName) async {
    if (userId != null) {
      final db = await DBHelper.instance.getDB();
      await db.update(
        "users",
        {'name': newName},
        where: "id = ?",
        whereArgs: [userId],
      );

      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser != null) {
        await DatabaseMethods().updateUserDetails({
          'name': newName,
        }, currentUser.uid);
      }

      setState(() {
        userName = newName;
      });

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Name updated successfully'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  void showEditNameDialog() {
    final nameController = TextEditingController(text: userName);

    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text("Edit Name"),
            content: TextField(
              controller: nameController,
              decoration: const InputDecoration(hintText: "Enter new name"),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text("Cancel"),
              ),
              TextButton(
                onPressed: () {
                  final newName = nameController.text.trim();
                  if (newName.isNotEmpty) {
                    updateUserName(newName);
                    Navigator.pop(context);
                  }
                },
                child: const Text("Update"),
              ),
            ],
          ),
    );
  }

  Future<void> deleteAccount() async {
    final prefs = await SharedPreferences.getInstance();
    final db = await DBHelper.instance.getDB();
    final currentUser = FirebaseAuth.instance.currentUser;

    if (userId != null) {
      await db.delete("users", where: "id = ?", whereArgs: [userId]);
    }

    if (currentUser != null) {
      try {
        await DatabaseMethods().deleteUserFromFirestore(currentUser.uid);
        await currentUser.delete();
      } catch (e) {
        debugPrint("Error deleting user from Firebase: $e");
      }
    }

    await prefs.remove('user_id');

    if (!mounted) return;
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => const SignIn()),
      (route) => false,
    );
  }

  Future<void> logout() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.clear(); // Clears all user-related data
    await FirebaseAuth.instance.signOut(); // Firebase sign out

    if (!mounted) return;
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (_) => const SignIn()),
      (route) => false,
    );
  }

  void showDeleteConfirmation() {
    showDialog(
      context: context,
      builder:
          (context) => AlertDialog(
            title: const Text("Delete Account"),
            content: const Text(
              "Are you sure you want to permanently delete your account? This action cannot be undone.",
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text("Cancel"),
              ),
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  deleteAccount();
                },
                child: const Text(
                  "Delete",
                  style: TextStyle(color: Colors.red),
                ),
              ),
            ],
          ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 235, 235, 235),
      appBar: AppBar(
        backgroundColor: const Color.fromARGB(255, 235, 235, 235),
        automaticallyImplyLeading: false,
        centerTitle: true,
        title: const Text(
          'Profile',
          style: TextStyle(
            color: Colors.black,
            fontSize: 30,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: SingleChildScrollView(
        child: Container(
          margin: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Center(
                child: Container(
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(),
                  ),
                  height: 120,
                  width: 120,
                  child: ClipOval(
                    child: Image.asset(
                      "assets/logo/user.png",
                      fit: BoxFit.cover,
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
              GestureDetector(
                onTap: showEditNameDialog,
                child: Container(
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: const BorderRadius.all(Radius.circular(10.0)),
                  ),
                  width: MediaQuery.of(context).size.width,
                  child: Container(
                    margin: const EdgeInsets.all(10.0),
                    child: Row(
                      children: [
                        const Icon(Icons.person_2_outlined, size: 30.0),
                        const SizedBox(width: 10.0),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'Name',
                              style: TextStyle(color: Colors.grey),
                            ),
                            Text(
                              userName,
                              style: const TextStyle(
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ],
                        ),
                        const Spacer(),
                        const Icon(Icons.edit_outlined, color: Colors.grey),
                      ],
                    ),
                  ),
                ),
              ),
              const SizedBox(height: 20.0),
              _infoCard(Icons.email_outlined, 'Email', userEmail),

              // const SizedBox(height: 20.0),
              // GestureDetector(
              //   onTap: showDeleteConfirmation,
              //   child: _actionCard(Icons.delete_outline, 'Delete Account'),
              // ),
              const SizedBox(height: 20.0),
              GestureDetector(
                onTap: logout,
                child: _actionCard(Icons.logout_outlined, 'Logout'),
              ),
              const SizedBox(height: 20.0),
              const Text(
                "More Options",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 10),
              featuresGrid(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _infoCard(IconData icon, String label, String value) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: const BorderRadius.all(Radius.circular(10.0)),
      ),
      width: MediaQuery.of(context).size.width,
      child: Container(
        margin: const EdgeInsets.all(10.0),
        child: Row(
          children: [
            Icon(icon, size: 30.0),
            const SizedBox(width: 10.0),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(label, style: const TextStyle(color: Colors.grey)),
                Text(
                  value,
                  style: const TextStyle(fontWeight: FontWeight.w600),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _actionCard(IconData icon, String title) {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.all(Radius.circular(10.0)),
      ),
      width: MediaQuery.of(context).size.width,
      child: Padding(
        padding: const EdgeInsets.all(10.0),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Row(
              children: [
                Icon(icon, size: 30.0),
                const SizedBox(width: 10.0),
                Text(title, style: AppWidget.semiboldTextFieldStyle()),
              ],
            ),
            const Icon(Icons.arrow_forward_ios_outlined),
          ],
        ),
      ),
    );
  }

  Widget featuresGrid() {
    final features = [
      {'icon': Icons.reviews_outlined, 'label': 'My Reviews'},
      {'icon': Icons.help_outline, 'label': 'Help Center'},

      {'icon': Icons.group, 'label': 'My Affiliates'},
      {'icon': Icons.payment, 'label': 'Payment Options'},
    ];

    return GridView.builder(
      shrinkWrap: true,
      physics: NeverScrollableScrollPhysics(),
      itemCount: features.length,
      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 4,
        crossAxisSpacing: 10,
        mainAxisSpacing: 10,
        childAspectRatio: 0.8,
      ),
      itemBuilder: (context, index) {
        final feature = features[index];
        return GestureDetector(
          onTap: () {
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('${feature['label']} clicked'),
                duration: Duration(seconds: 1),
              ),
            );
          },
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircleAvatar(
                radius: 24,
                backgroundColor: Colors.white,
                child: Icon(
                  feature['icon'] as IconData,
                  size: 28,
                  color: Colors.black,
                ),
              ),
              const SizedBox(height: 5),
              Text(
                feature['label'] as String,
                textAlign: TextAlign.center,
                style: const TextStyle(fontSize: 12),
              ),
            ],
          ),
        );
      },
    );
  }
}
 