import 'dart:io';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:video_player/video_player.dart';
import 'package:chewie/chewie.dart';

class ReviewSection extends StatelessWidget {
  final List<Map<String, dynamic>> reviews;

  const ReviewSection({super.key, required this.reviews});

  bool isVideo(String path) {
    final ext = path.toLowerCase();
    return ext.endsWith(".mp4") || ext.endsWith(".mov") || ext.endsWith(".avi");
  }

  void _showImageDialog(BuildContext context, String imagePath) {
    showDialog(
      context: context,
      builder:
          (_) => Dialog(
            child: Container(
              padding: const EdgeInsets.all(8),
              child: Image.file(File(imagePath)),
            ),
          ),
    );
  }

  void _showVideoDialog(BuildContext context, String videoPath) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => VideoPreviewScreen(videoPath: videoPath),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          "Customer Reviews",
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 10),
        if (reviews.isEmpty)
          const Text(
            "No reviews yet.",
            style: TextStyle(color: Colors.grey, fontStyle: FontStyle.italic),
          )
        else
          ...reviews.map((review) {
            final String reviewer = review['reviewer'] ?? 'Anonymous';
            final int rating = review['rating'] ?? 0;
            final String comment = review['comment'] ?? '';
            final String? mediaPath = review['media_path'];
            final DateTime date =
                DateTime.tryParse(review['timestamp'] ?? '') ?? DateTime.now();
            final formattedDate = DateFormat.yMMMd().format(date);

            return Card(
              margin: const EdgeInsets.symmetric(vertical: 6),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
              child: Padding(
                padding: const EdgeInsets.all(10),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Reviewer name and date
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          reviewer,
                          style: const TextStyle(fontWeight: FontWeight.bold),
                        ),
                        Text(
                          formattedDate,
                          style: const TextStyle(
                            color: Colors.grey,
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 6),

                    // Rating stars
                    Row(
                      children: List.generate(5, (i) {
                        return Icon(
                          i < rating ? Icons.star : Icons.star_border,
                          color: Colors.amber,
                          size: 20,
                        );
                      }),
                    ),
                    const SizedBox(height: 6),

                    // Comment
                    Text(comment),

                    const SizedBox(height: 8),

                    // Media
                    if (mediaPath != null)
                      GestureDetector(
                        onTap: () {
                          if (isVideo(mediaPath)) {
                            _showVideoDialog(context, mediaPath);
                          } else {
                            _showImageDialog(context, mediaPath);
                          }
                        },
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(8),
                          child:
                              isVideo(mediaPath)
                                  ? Stack(
                                    alignment: Alignment.center,
                                    children: [
                                      Container(
                                        height: 100,
                                        width: double.infinity,
                                        color: Colors.black12,
                                        child: const Icon(
                                          Icons.videocam,
                                          size: 50,
                                          color: Colors.grey,
                                        ),
                                      ),
                                      const Icon(
                                        Icons.play_circle_fill,
                                        size: 50,
                                        color: Colors.white,
                                      ),
                                    ],
                                  )
                                  : Image.file(
                                    File(mediaPath),
                                    height: 100,
                                    width: double.infinity,
                                    fit: BoxFit.cover,
                                    errorBuilder:
                                        (context, error, stackTrace) =>
                                            const Text("Failed to load image"),
                                  ),
                        ),
                      ),
                  ],
                ),
              ),
            );
          }).toList(),
      ],
    );
  }
}

// Fullscreen video player screen
class VideoPreviewScreen extends StatefulWidget {
  final String videoPath;

  const VideoPreviewScreen({super.key, required this.videoPath});

  @override
  State<VideoPreviewScreen> createState() => _VideoPreviewScreenState();
}

class _VideoPreviewScreenState extends State<VideoPreviewScreen> {
  late VideoPlayerController _controller;
  ChewieController? _chewieController;

  @override
  void initState() {
    super.initState();
    _controller = VideoPlayerController.file(File(widget.videoPath))
      ..initialize().then((_) {
        setState(() {});
        _chewieController = ChewieController(
          videoPlayerController: _controller,
          autoPlay: true,
          looping: false,
        );
      });
  }

  @override
  void dispose() {
    _controller.dispose();
    _chewieController?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Video Preview")),
      body: Center(
        child:
            _chewieController != null &&
                    _chewieController!.videoPlayerController.value.isInitialized
                ? Chewie(controller: _chewieController!)
                : const CircularProgressIndicator(),
      ),
    );
  }
}
