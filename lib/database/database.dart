import 'dart:io'; 
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/material.dart';
import 'package:uuid/uuid.dart'; 

class DatabaseMethods {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance; 
  final FirebaseStorage _storage = FirebaseStorage.instance;

  // --- User-related Methods ---

  // Add user details to Firestore
  // Sets a new document for the user with the given ID.
  Future<void> addUserDetails(Map<String, dynamic> userInfoMap, String userId) async {
    return await _firestore.collection("users").doc(userId).set(userInfoMap);
  }

  // Get user details from Firestore
  // Fetches a specific user's document by their ID.
  Future<DocumentSnapshot> getUserDetails(String userId) async {
    return await _firestore.collection("users").doc(userId).get();
  }

  // Update user details in Firestore
  // Updates specific fields in an existing user's document.
  Future<void> updateUserDetails(Map<String, dynamic> updatedData, String userId) async {
    return await _firestore.collection("users").doc(userId).update(updatedData);
  }

  // Delete user from Firestore
  // Deletes a specific user's document from the "users" collection.
  Future<void> deleteUserFromFirestore(String userId) async {
    return await _firestore.collection("users").doc(userId).delete();
  }

  // Method to upload image to Firebase Storage and get its download URL
  // This method is crucial for handling user profile pictures.
  // It takes a File object (the image to upload) and the user's ID.
  // It returns the download URL of the uploaded image, or null if an error occurs.
  Future<String?> uploadImageAndGetUrl(File imageFile, String userId) async {
    try {
      // Generate a unique file name to prevent collisions.
      // We use the user ID to organize images per user, and a UUID for uniqueness.
      String fileName = 'profile_images/$userId/${const Uuid().v4()}.jpg';

      // Create a reference to the location where the image will be stored in Firebase Storage.
      Reference ref = _storage.ref().child(fileName);

      // Upload the file to Firebase Storage.
      UploadTask uploadTask = ref.putFile(imageFile);

      // Wait for the upload to complete and get the snapshot.
      TaskSnapshot snapshot = await uploadTask;

      // Get the download URL of the uploaded image.
      String downloadUrl = await snapshot.ref.getDownloadURL();

      return downloadUrl;
    } catch (e) {
      // Print any errors that occur during the upload process for debugging.
      debugPrint("Error uploading image to Firebase Storage: $e");
      return null; // Return null to indicate failure
    }
  }

  // --- Product-related Methods ---

  // Add a new product to Firestore
  // The 'productId' could be generated by Firestore automatically (doc().set())
  // or provided if you have a specific ID system (doc(productId).set()).
  // For simplicity, here we let Firestore generate the ID.
  Future<DocumentReference<Map<String, dynamic>>> addProduct(Map<String, dynamic> productInfoMap) async {
    return await _firestore.collection("products").add(productInfoMap);
  }

  // Get all products from Firestore
  // Returns a stream of QuerySnapshot to listen for real-time updates.
  Stream<QuerySnapshot> getProducts() {
    return _firestore.collection("products").snapshots();
  }

  // Get products by category (example)
  Stream<QuerySnapshot> getProductsByCategory(String category) {
    return _firestore.collection("products").where("category", isEqualTo: category).snapshots();
  }

  // Update product details in Firestore
  // Requires the 'productId' (document ID) of the product to update.
  Future<void> updateProductDetails(String productId, Map<String, dynamic> updatedData) async {
    return await _firestore.collection("products").doc(productId).update(updatedData);
  }

  // Delete a product from Firestore
  // Requires the 'productId' (document ID) of the product to delete.
  Future<void> deleteProduct(String productId) async {
    return await _firestore.collection("products").doc(productId).delete();
  }

  // You can add more methods here as your app grows, e.g.:
  // - addOrder()
  // - getUserOrders(String userId)
  // - addCategory()
  // - getCategories()
  // - etc.
}